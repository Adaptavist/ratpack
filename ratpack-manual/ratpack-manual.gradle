apply plugin: 'compass'

buildscript {
  repositories {
    mavenCentral()
    maven { url 'http://dl.bintray.com/robfletcher/gradle-plugins' }
  }
  dependencies {
    classpath 'org.gradle.plugins:gradle-compass:1.0.1'
    classpath "org.gebish:markdown2book:1.0"
    classpath "org.pegdown:pegdown:1.2.1"
  }
}

apply from: "$rootDir/gradle/checkstyle.gradle"

idea {
  module {
    excludeDirs += file(".jruby")
    excludeDirs += file(".sass-cache")
  }
}

modifyPom { pom ->
  project {
    name "Ratpack Manual"
  }
}

apiModules.each { evaluationDependsOn(it.path) }
task api(type: Javadoc) {
  group "manual"
  description "Generates the Javadoc for the entire public API"

  classpath = files()
  destinationDir = file("$buildDir/api")
  options.use true

  options.links("http://docs.oracle.com/javase/7/docs/api")

  apiModules.each {
    source it.sourceSets.main.java
    classpath += it.sourceSets.main.compileClasspath + it.sourceSets.main.output

    if (it.hasProperty("apiLinks")) {
      options.links(*it.apiLinks)
    }
  }

  exclude "**/internal/**"
}

task checkApi(type: Checkstyle) {
  group "manual"
  description "Tests that the public API is sufficiently documented"

  source api.source
  configFile = rootProject.file("gradle/checkstyle/checkstyle-api.xml")
  classpath = files()
  reports.xml.destination = reporting.file("checkstyle-api.xml")
  ignoreFailures true
}

task tokeniseManual(type: Sync) {
  group "manual"
  description "Substitute the variables in the manual Markdown files"

  from "src"
  into "$buildDir/manual-tokenised"

  ext.substitutionProperties = [
      title: "Ratpack",
      tagline: "A Micro Web Framework for Java & Groovy",
      "ratpack-version": project.version,
      "ratpack-group": project.group,
      "groovy-version": groovyVersion,
      "manual-url": "https://oss.sonatype.org/content/repositories/${isSnapshot ? 'snapshots' : 'releases'}/org/ratpack-framework/ratpack-manual/$version/ratpack-manual-${version}.zip".toString(),
      head: """
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width">
        <link href="http://fonts.googleapis.com/css?family=Cabin+Condensed:700|Libre+Baskerville:400,700,400italic|Engagement|Raleway:200" rel="stylesheet" type="text/css">
        <link href="css/normalize.css" rel="stylesheet" type="text/css">
        <link href="css/stylesheet.css" rel="stylesheet" type="text/css">
        <script src="js/modernizr.js"></script>
        <script src="js/prism.js"></script>
        <script src="js/jquery-1.9.1.min.js"></script>
      """,
      footer: """
        <h2>Ratpack Manual - $version - ${new Date().format("MMMM, yyyy")}</h2>
        <p>
          <a href="http://www.ratpack-framework.org">www.ratpack-framework.org</a><br>
          Licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>
        </p>
      """.toString()
  ]

  inputs.properties(substitutionProperties)

  def tokenisableExtensions = ["md", "html"]
  inputs.property("tokenisableExtensions", tokenisableExtensions)

  eachFile { file ->
    if (tokenisableExtensions.any { file.name.endsWith(it) }) {
      file.filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: substitutionProperties)
    }
  }
}

task compileManual {
  group "manual"
  description "Converts the manual tokenised Markdown into HTML"

  dependsOn tokeniseManual

  ext.source = tokeniseManual.destinationDir
  inputs.dir(source)

  ext.destination = file("$buildDir/manual-compiled")
  outputs.dir(destination)

  ext.encoding = "UTF-8"
  inputs.property("encoding", encoding)

  doLast {
    new markdown2book.Generator(source, destination, encoding).generate()
  }
}

task packageManual(type: Sync) {
  group "manual"
  description "Brings together the compiled manual and API reference"

  into "$buildDir/manual"
  from compileManual

  into ("api") {
    from api
  }
}

task openManual(dependsOn: packageManual) {
  group "manual"
  description "Builds the manual, then opens it in your web browser"

  doLast {
    new java.awt.Desktop().browse(file("$packageManual.destinationDir/index.html").toURI())
  }
}

task openApi(dependsOn: api) {
  group "manual"
  description "Builds the API reference, then opens it in your web browser"

  doLast {
    new java.awt.Desktop().browse(file("$api.destinationDir/index.html").toURI())
  }
}

task manualZip(type: Zip) {
  from packageManual
}

artifacts {
  archives manualZip
}

task check(dependsOn: checkApi)
task build(dependsOn: [assemble, check]) {
  group "build"
  description "Builds the manual and tests it"
}


compass {
  cssDir = file('src/css')
  sassDir = file('src/sass')
  imagesDir = file('src/images')
  javascriptsDir = file('src/js')
  relativeAssets = true
}

compileManual.inputs.files compileSass
