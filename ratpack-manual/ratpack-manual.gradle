buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.gebish:markdown2book:1.0"
  }
}

archivesBaseName = "geb-manual"

modifyPom { pom ->
  project {
    name "Ratpack Manual"
  }
}

task tokeniseManual(type: Sync) {
  from "src"
  into "$buildDir/manual-tokenised"

  ext.substitutionProperties = [
      title: "Ratpack Manual",
      tagline: "– A Micro Web Framework for Java (and Groovy) –",
      "ratpack-version": project.version,
      "ratpack-group": project.group,
      "groovy-version": groovyVersion,
      "manual-url": "https://oss.sonatype.org/content/repositories/${isSnapshot ? 'snapshots' : 'releases'}/org/ratpack-framework/ratpack-manual/$version/ratpack-manual-${version}.zip".toString(),
      head: """
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <link href="css/stylesheet.css" rel="stylesheet" type="text/css">
        <link type="text/css" rel="stylesheet" href="css/shCore.css"></link>
        <link type="text/css" rel="stylesheet" href="css/shThemeEclipse.css"></link>
        <script language="javascript" src="js/shCore.js"></script>
        <script language="javascript" src="js/shBrushGroovy.js"></script>
        <script type="text/javascript" src="js/jquery-1.6.1.min.js"></script>
        <script type="text/javascript" src="js/syntaxhighlight.js"></script>
      """,
      footer: """
        Ratpack Manual - $version - ${new Date().format("MMMM, yyyy")}<br />
        <a href="http://www.ratpack-framework.org">www.ratpack-framework.org</a><br />
        Licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License, Version 2.0</a>
      """.toString()
  ]

  inputs.properties(substitutionProperties)

  def tokenisableExtensions = ["md", "html"]
  inputs.property("tokenisableExtensions", tokenisableExtensions)

  eachFile { file ->
    if (tokenisableExtensions.any { file.name.endsWith(it) }) {
      file.filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: substitutionProperties)
    }
  }
}

configurations {
  groovydoc
}

apiModules.each { evaluationDependsOn(it.path) }

task api(type: Javadoc) {
  classpath = files()
  destinationDir = file("$buildDir/api")
  apiModules.each {
    source it.sourceSets.main.java
    classpath += it.sourceSets.main.compileClasspath + it.sourceSets.main.output
  }
  exclude "**/internal/**"
}

task compileManual {
  dependsOn tokeniseManual

  ext.source = tokeniseManual.destinationDir
  inputs.dir(source)

  ext.destination = file("$buildDir/manual-compiled")
  outputs.dir(destination)

  ext.encoding = "UTF-8"
  inputs.property("encoding", encoding)

  doLast {
    new markdown2book.Generator(source, destination, encoding).generate()
  }
}

task packageManual(type: Sync) {
  into "$buildDir/manual"
  from compileManual

  into ("api") {
    from api
  }
}

task openManual() {
  doLast {
    new java.awt.Desktop().browse(file("$packageManual.destinationDir/index.html").toURI())
  }
}

task manualZip(type: Zip) {
  from packageManual
}

artifacts {
  archives manualZip
}

task build(dependsOn: manualZip)