/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    maven { url "http://dl.bintray.com/pledbrook/plugins" }
  }

  dependencies {
    classpath "uk.co.cacoethes:lazybones-gradle:1.0.4"
  }
}

dependencies {
  compile "org.gradle:gradle-tooling-api:${gradle.gradleVersion}"
}

apply from: "$rootDir/gradle/javaModule.gradle"
apply plugin: "lazybones-templates"

tasks.matching { it.name.startsWith("publishTemplate") }.all {
  dependsOn test
  it.doFirst {
    if (isSnapshot) {
      throw new GradleException("Cannot publish lazybones template with a snapshot version: $version")
    }
  }
}

task compileTemplates << {
  file("src/main/templates").eachDir { source ->
    def destination = file("$buildDir/lazybones-templates/$source.name")

    copy {
      from source
      into destination

      filter {
        String line ->
          line.replaceAll('io.ratpack:ratpack-gradle:<<version>>',
            "io.ratpack:ratpack-gradle:$version")
      }
    }

    def f = new File("$destination/VERSION")
    f.write(version)
  }
}

test {
  systemProperty "templatesBaseDir", file("$buildDir/lazybones-templates").absolutePath
}

lazybones {
  def templates = []
  file("src/main/templates").eachDir { sourceTemplate ->
    templates = file("$buildDir/lazybones-templates/$sourceTemplate.name")
  }

  templateDirs = files(templates)
  repositoryUrl = "https://api.bintray.com/content/ratpack/lazybones"
  repositoryUsername = project.hasProperty('ratpackBintrayUser') ? ratpackBintrayUser : ""
  repositoryApiKey = project.hasProperty('ratpackBintrayApiKey') ? ratpackBintrayApiKey : ""
  publish = true
}

compileTemplates.mustRunAfter clean
test.dependsOn compileTemplates
test.dependsOn {apiModules*.install}
