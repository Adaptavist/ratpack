/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    maven { url "http://dl.bintray.com/robfletcher/gradle-plugins" }
    jcenter()
  }
  dependencies {
    classpath 'org.gradle.plugins:gradle-compass:1.0.9'
    classpath 'org.gebish:geb-gradle:0.9.2'
  }
}

import org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile
import org.gradle.plugins.compass.*
import geb.gradle.saucelabs.SauceAccount

import static org.apache.commons.io.FileUtils.copyURLToFile
import static org.apache.commons.lang.SystemUtils.*

apply plugin: 'coffeescript-base'
apply plugin: 'compass'
apply plugin: "ratpack-groovy"
apply plugin: "geb-saucelabs"

repositories {
  maven { url "http://repo.springsource.org/repo" } // for springloaded
  maven { url "http://repo.gradle.org/gradle/javascript-public/" } // for coffeescript plugin
  maven { url "http://repository-saucelabs.forge.cloudbees.com/release" }
}

def manualVersions = ["0.9.0", "0.9.1", "0.9.2", "0.9.3"] // TODO - source this from GitHub

configurations {
  latestManual {}
  browserTestCompile.extendsFrom testCompile
  browserTestRuntime.extendsFrom testRuntime

  manualVersions.each {
    delegate."manual-$it"
  }
}

sourceSets {
  browserTest {
    resources.srcDir(file('src/ratpack'))
    compileClasspath += (main.output + test.output)
    runtimeClasspath += (main.output + test.output)
  }
}

dependencies {
  springloaded "org.springsource.loaded:springloaded:1.1.5.RELEASE"
  compile project(":ratpack-groovy")
  compile project(":ratpack-codahale-metrics")
  compile project(":ratpack-jackson")
  compile project(":ratpack-remote")
  compile project(":ratpack-rx")
  compile 'org.pegdown:pegdown:1.4.1'
  testCompile project(":ratpack-groovy-test")
  testCompile project(":ratpack-remote-test")
  testCompile commonDependencies.spock
  testCompile 'org.jsoup:jsoup:1.7.2'
  latestManual project(":ratpack-manual")

  browserTestCompile "org.gebish:geb-spock:0.9.2"
  browserTestCompile "org.seleniumhq.selenium:selenium-chrome-driver:2.35.0", {
    exclude module: 'guava'
  }
  sauceConnect "com.saucelabs:sauce-connect:3.0.28"

  manualVersions.each {
    delegate."manual-$it" "io.ratpack:ratpack-manual:$it@zip"
  }
}

task gatherManuals(type: Sync) {
  inputs.files configurations.latestManual
  into "src/ratpack/manual"
  into version - "-SNAPSHOT", {
    from { zipTree(configurations.latestManual.singleFile) }
  }

  def configureManualExtraction = { configuration, label ->
    inputs.files configuration
    into "src/ratpack/manual"
    into label, {
      from { zipTree(configuration.singleFile) }
    }
  }

  manualVersions.each {
    configureManualExtraction(configurations["manual-$it"], it)
  }

}

idea {
  module {
//    excludeDirs += gatherManuals.destinationDir
  }
}

task downloadChromeDriver {
  def webdriverOs
  if (IS_OS_MAC) {
    webdriverOs = 'mac32'
  } else if (IS_OS_LINUX) {
    webdriverOs = 'linux64'
  } else if (IS_OS_WINDOWS) {
    webdriverOs = 'win32'
  }

  def output = rootProject.file(".gradle/webdriver/downloads/chromedriver_${webdriverOs}_2.1.zip")
  outputs.file output

  doLast {
    copyURLToFile(new URL("https://chromedriver.googlecode.com/files/chromedriver_${webdriverOs}_2.1.zip"), output)
  }
}

task unzipChromeDriver(type: Copy) {
  dependsOn downloadChromeDriver
  from(zipTree(downloadChromeDriver.outputs.files.singleFile))
  into rootProject.file('.gradle/webdriver/driver')
}

task browserTest(type: Test) {
  dependsOn unzipChromeDriver
  testClassesDir = sourceSets.browserTest.output.classesDir
  classpath = sourceSets.browserTest.runtimeClasspath

  jvmArgs "-Dwebdriver.chrome.driver=${rootProject.file('.gradle/webdriver/driver/chromedriver')}"
}

sauceLabs {
  browsers {
    chrome_linux
  }
  task {
    testClassesDir = browserTest.testClassesDir
    classpath = browserTest.classpath

    systemProperty 'ratpack.port', '5050'
  }
  account {
    username = System.getenv(SauceAccount.USER_ENV_VAR)
    accessKey = System.getenv(SauceAccount.ACCESS_KEY_ENV_VAR)
  }
}

if (project.hasProperty("ciBuild")) {
  check.dependsOn allSauceTests
}

task compileCoffee(type: CoffeeScriptCompile) {
  source fileTree('src/main/static/scripts')
  destinationDir file('src/ratpack/assets/scripts')
}

prepareBaseDir {
  dependsOn gatherManuals, compileCoffee, compileSass
}

compass {
  gemPath = new File(gradle.gradleUserHomeDir, ".jruby")
  cssDir = file('src/ratpack/assets/styles')
  sassDir = file('src/main/static/styles')
  imagesDir = file('src/ratpack/assets/images')
  importPath = files('../ratpack-stylesheets')
  fontsDir = file('../ratpack-stylesheets/fonts')
  quiet = true
}

compileSass {
  environment = 'production'
  debugInfo = false
}

clean.dependsOn cleanCompileSass
run.dependsOn watchSass
installApp.dependsOn compileSass

task createScriptsDir {
  doLast {
    mkdir "src/ratpack/assets/scripts"
  }
}
configure([watchSass, compileSass]) {
  dependsOn createScriptsDir
}

clean.dependsOn cleanCompileCoffee
clean.dependsOn cleanGatherManuals

idea {
  module {
    testSourceDirs += sourceSets.browserTest.allSource.srcDirs
    scopes.TEST.plus += configurations.browserTestCompile
  }
}
