buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath "org.gradle.api.plugins:gradle-clover-plugin:0.6.1"
  }
}

allprojects {
  group = "org.ratpack-framework"
  version = rootProject.file("shared-resources/org/ratpackframework/ratpack-version.txt").text.trim()

  apply plugin: "idea"
  apply plugin: "eclipse"

  repositories {
    mavenCentral()
  }

  if (project.hasProperty("enableClover")) {
    project.apply from: rootProject.file("gradle/clover.gradle")
  }
}

apply from: "gradle/idea/idea.gradle"

ext {
  groovyVersion = "2.1.3"
  isSnapshot = version.endsWith("SNAPSHOT")

  commonDependencies = [
      spock: dependencies.create("org.spockframework:spock-core:0.7-groovy-2.0", {
        exclude module: "groovy-all"
      }),
      groovy: dependencies.create("org.codehaus.groovy:groovy-all:$groovyVersion")
  ]

  apiModules = [
      "ratpack-core", "ratpack-groovy", "ratpack-guice", "ratpack-session"
  ].collect { project(it) }
}


subprojects {
  tasks.withType(Upload).matching { it.name != "install" }.all {
    rootProject.subprojects {
      mustRunAfter tasks.matching { it instanceof VerificationTask }
    }
  }

  tasks.withType(Test) {
    allprojects {
      mustRunAfter tasks.withType(Checkstyle)
    }
  }

  apply plugin: "maven"
  apply from: "${rootDir}/gradle/pom.gradle"
  apply plugin: "signing"

  if (rootProject.hasProperty("ciBuild")) {
    plugins.withType(ReportingBasePlugin) {
      reporting.baseDir = rootProject.file("build/reports/$name")
    }
  }

  plugins.withType(JavaPlugin) {
    sourceSets.main {
      resources {
        srcDir rootProject.file("shared-resources")
      }
    }

    tasks.withType(AbstractCompile) {
      options.compilerArgs << "-Werror" <<  "-Xlint:all" << "-Xlint:-options"
    }

    test {
      testLogging {
        events "failed"
        exceptionFormat "full"
      }
    }

    sourceCompatibility = "1.5"
    targetCompatibility = "1.5"

    tasks.withType(Javadoc) {
      options.encoding = "utf-8"
      options.docEncoding = "utf-8"
      options.charSet = "utf-8"
      options.links(
          "http://docs.oracle.com/javase/7/docs/api",
          "http://google-guice.googlecode.com/git/javadoc",
          "http://docs.jboss.org/netty/3.2/api",
          "http://groovy.codehaus.org/api"
      )
      exclude "**/internal/**"
    }

    task sourceJar(type: Jar) {
      description "An archive of the source code for Maven Central"
      classifier "sources"
      from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
      description "An archive of the JavaDocs for Maven Central"
      classifier "javadoc"
      from javadoc
    }

    artifacts {
      archives javadocJar, sourceJar
    }

    signing {
      sign configurations.archives
      required { gradle.taskGraph.hasTask(uploadArchives) }
    }

    install {
      repositories {
        mavenDeployer {
          repository(url: "file://${rootProject.buildDir.absolutePath}/localrepo")
        }
      }
    }

    uploadArchives { task ->
      repositories.mavenDeployer {
        beforeDeployment { deployment ->
          signing.signPom(deployment)
        }
        gradle.taskGraph.whenReady { taskGraph ->
          if (taskGraph.hasTask(task)) {
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
              authentication(userName: mavenCentralUsername, password: mavenCentralPassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
              authentication(userName: mavenCentralUsername, password: mavenCentralPassword)
            }
          }
        }
      }
    }

    modifyPom {
      project {
        description "A Micro Web Framework for Groovy"
        url "https://github.com/ratpack/ratpack"
        licenses {
          license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
          }
        }
        developers {
          developer {
            id "tlberglund"
            name "Tim Berglund"
            email "tlberglund@gmail.com"
          }
          developer {
            id "ldaley"
            name "Luke Daley"
            email "ld@ldaley.com"
          }
        }
        scm {
          connection "scm:https://ratpack@github.com/ratpack/ratpack"
          developerConnection "scm:git@github.com:ratpack/ratpack.git"
          url "https://github.com/ratpack/ratpack"
        }
      }
    }
  }
}

task ciZip(type: Zip) {
  into "reports", { from "build/reports" }
  into "manual", { from { project(":ratpack-manual").packageManual } }
  archiveName = "ci.zip"
  destinationDir = buildDir
}
